defaults: &defaults
  working_directory: ~/project
  docker:
    - image: circleci/node:8

version: 2

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Notify build started
          command: |
            BUILD=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}
            curl -H "Content-Type: application/json" \
            -d '{ "release": "'$BUILD'" }' \
            -X POST https://api-pipeline.dashboardhub.io/environments/$DH_ENV/deployed/$DH_TOKEN/startBuild
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Check coding standards
          command: npm run lint
      - run:
          name: Build code
          command: npm run build
      - run:
          name: Notify build completed
          command: |
            BUILD=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}
            curl -H "Content-Type: application/json" \
            -d '{ "release": "'$BUILD'" }' \
            -X POST https://api-pipeline.dashboardhub.io/environments/$DH_ENV/deployed/$DH_TOKEN/finishBuild
      - run:
          name: Notify build failed
          when: on_fail
          command: |
            BUILD=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}
            curl -H "Content-Type: application/json" \
            -d '{ "release": "'$BUILD'" }' \
            -X POST https://api-pipeline.dashboardhub.io/environments/$DH_ENV/deployed/$DH_TOKEN/failBuild
      - persist_to_workspace:
          root: .
          paths:
            - .aws
            - dist

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/project
      - run: sudo apt-get update
      - run: sudo apt-get install python3 python3-pip
      - run: sudo pip3 install awscli --upgrade
      - run:
          name: Notify deploy started
          command: |
            BUILD=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}
            curl -H "Content-Type: application/json" \
            -d '{ "release": "'$BUILD'" }' \
            -X POST https://api-pipeline.dashboardhub.io/environments/$DH_ENV/deployed/$DH_TOKEN/startDeploy
      - run:
          name: Create or update S3 bucket
          command: |
            sed -i 's|{{ S3_BUCKET }}|'${DEPLOY_URI}'|g' .aws/config/s3.json
            (aws cloudformation create-stack --stack-name "${DEPLOY_STACK}-s3" --template-body "file://.aws/templates/s3.template" --parameters "file://.aws/config/s3.json" --region eu-west-1 \
                && aws cloudformation wait stack-create-complete --stack-name "${DEPLOY_STACK}-s3" --region eu-west-1) \
            || (aws cloudformation update-stack --stack-name "${DEPLOY_STACK}-s3" --template-body "file://.aws/templates/s3.template" --parameters "file://.aws/config/s3.json" --region eu-west-1 \
                && aws cloudformation wait stack-update-complete --stack-name "${DEPLOY_STACK}-s3" --region eu-west-1) \
            || echo "SKIPPING create & update of 's3'"
          no_output_timeout: 30m
      - run:
          name: Create or update CloudFront distribution
          command: |
            sed -i 's|{{ AWS_CERT }}|'${DEPLOY_CERT}'|g' .aws/config/cloudfront.json
            sed -i 's|{{ S3_STACK }}|'${DEPLOY_STACK}-s3'|g' .aws/config/cloudfront.json
            (aws cloudformation create-stack --stack-name "${DEPLOY_STACK}-cloudfront" --template-body "file://.aws/templates/cloudfront.template" --parameters "file://.aws/config/cloudfront.json" --region eu-west-1 \
                && aws cloudformation wait stack-create-complete --stack-name "${DEPLOY_STACK}-cloudfront" --region eu-west-1) \
            || (aws cloudformation update-stack --stack-name "${DEPLOY_STACK}-cloudfront" --template-body "file://.aws/templates/cloudfront.template" --parameters "file://.aws/config/cloudfront.json" --region eu-west-1 \
                && aws cloudformation wait stack-update-complete --stack-name "${DEPLOY_STACK}-cloudfront" --region eu-west-1) \
            || echo "SKIPPING create & update of 'cloudfront'"
          no_output_timeout: 1h
      - run:
          name: Sync assets to S3
          command: aws s3 sync dist s3://${DEPLOY_URI} --delete --region eu-west-1 --cache-control 86400
      - run:
          name: Invalidate CloudFront caches
          command: aws cloudfront create-invalidation --distribution-id `aws cloudformation list-stack-resources --stack-name "${DEPLOY_STACK}-cloudfront" --region eu-west-1 | python -c 'import sys; import json; res=json.loads(sys.stdin.read()); print(res["StackResourceSummaries"][0]["PhysicalResourceId"])'` --paths '/*'  --region eu-west-1
      - run:
          name: Notify deploy completed
          command: |
            BUILD=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}
            curl -H "Content-Type: application/json" \
            -d '{ "release": "'$BUILD'" }' \
            -X POST https://api-pipeline.dashboardhub.io/environments/$DH_ENV/deployed/$DH_TOKEN/finishDeploy
      - run:
          name: Notify deploy failed
          when: on_fail
          command: |
            BUILD=$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7}
            curl -H "Content-Type: application/json" \
            -d '{ "release": "'$BUILD'" }' \
            -X POST https://api-pipeline.dashboardhub.io/environments/$DH_ENV/deployed/$DH_TOKEN/failDeploy

workflows:
  version: 2

  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: /^(master)$/
